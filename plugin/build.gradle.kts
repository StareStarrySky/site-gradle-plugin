/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/custom_plugins.html
 */

plugins {
    id("com.gradle.plugin-publish")
    `maven-publish`
    `java-gradle-plugin`
    kotlin("jvm")
}

base {
    archivesBaseName = "site-gradle-plugin"
}

dependencies {
    implementation(platform(kotlin("bom")))
    implementation("org.kohsuke:github-api:1.123")
}

gradlePlugin {
    val siteGradlePlugin by plugins.creating {
        id = "com.github.starestarrysky.site-gradle-plugin"
        implementationClass = "com.github.starestarrysky.SiteGradlePlugin"
    }
}

val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

tasks.check {
    dependsOn(functionalTest)
}

pluginBundle {
    website = "https://github.com/StareStarrySky/site-gradle-plugin"
    vcsUrl = "https://github.com/StareStarrySky/site-gradle-plugin"

    description = "com.github.github:site-maven-plugin + org.kohsuke:github-api = this."

    (plugins) {
        "siteGradlePlugin" {
            displayName = "com.github.github:site-maven-plugin + org.kohsuke:github-api = this."
            tags = listOf("github", "site", "deploy", "github-api")
        }
    }

    mavenCoordinates {
        groupId = rootProject.group.toString()
        artifactId = project.base.archivesBaseName
        version = rootProject.version.toString()
    }
}

tasks {
    publishing {
        repositories {
            mavenLocal()
        }
        publications {
            create<MavenPublication>("maven") {
                groupId = rootProject.group.toString()
                artifactId = project.base.archivesBaseName
                version = rootProject.version.toString()

                from(getComponents()["java"])
            }
        }
    }
}
